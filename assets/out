#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp kubectl-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
echo "Resource setup successful."

# Parse parameters
configuration=$(jq -r '.params.configuration // ""' < $payload)
delete=$(jq -r '.params.delete // "false"' < $payload)

kubectl_apply() {
  echo $(ls $source)
  apply_args=("apply" "-f" "$source/$configuration")
  logfile="/tmp/log"
  mkdir -p /tmp
  kubectl_args=("${apply_args[@]}")
  kubectl "${kubectl_args[@]}" | tee "$logfile"
}

kubectl_delete() {
  if [ -z "$configuration" ]; then
    echo "invalid payload (missing  if delete=true)"
    exit 1
  fi

  echo "Deleting the configuration $configuration..."
  delete_args=("delete" "-f")
  delete_args+=("$configuration")
  logfile="/tmp/log"
  mkdir -p /tmp
  echo "Running command kubectl ${delete_args[@]} | tee $logfile"
  kubectl "${delete_args[@]}" | tee $logfile
}

if [ "$delete" = true ]; then
  kubectl_delete
  result="$(jq -n "{version:{configuration:\"$configuration\", deleted: \"true\"}, metadata: [{name: \"configuration\", value: \"$configuration\"}]}")"
  echo "$result" | jq -s add  >&3
else
  echo "Applying $configuration"
  kubectl_apply

  echo "Deployed $configuration"
  result="$(jq -n "{version:{configuration:\"$configuration\"}, metadata: [{name: \"configuration\", value: \"$configuration\"}]}")"
  echo "$result" | jq -s add  >&3
fi